"""example_digital_rf_hdf5.py is a simple example of writing Digital RF with python

Writes continuous complex short data.

$Id$
"""
# standard python imports
import os

# third party imports
import numpy

# Millstone imports
import digital_rf_hdf5

# writing parameters
sample_rate = 100.0 # 100 Hz sample rate - typically MUCH faster 
dtype_str = 'i2' # short int
samples_per_file = 40 # Number of samples per file - typically MUCH larger 
files_per_directory = 10 # Each subdirectory will have 40*10=400 samples = 4 seconds 
compression_level = 1 # low level of compression
checksum = False # no checksum
is_complex = True # complex values
num_subchannels = 1 # only one subchannel
marching_periods = False # no marching periods when writing 
uuid = "Fake UUID - use a better one!"
vector_length = 100 # number of samples written for each call - typically MUCH longer 
        
# create short data in r/i to test using that to write
arr_data = numpy.ones((vector_length,num_subchannels), 
                      dtype=[('r', numpy.int16), ('i', numpy.int16)])
for i in range(len(arr_data)):
    arr_data[i]['r'] = 2*i
    arr_data[i]['i'] = 3*i
  
# start 2014-03-09 12:30:30 plus one sample
start_global_index = (1394368230 * sample_rate) + 1

# set up top level directory
os.system("rm -rf /tmp/hdf5 ; mkdir /tmp/hdf5");
        
print("Writing complex short to multiple files and subdirectores in /tmp/hdf5 channel junk0");
os.system("rm -rf /tmp/hdf5/junk0 ; mkdir /tmp/hdf5/junk0");

# init
data_object = digital_rf_hdf5.write_hdf5_channel("/tmp/hdf5/junk0", dtype_str, samples_per_file, 
                                                 files_per_directory, start_global_index,
                                                 sample_rate, uuid, compression_level, checksum, 
                                                 is_complex, num_subchannels, marching_periods);
# write
for i in range(7): # will write 700 samples - so creates two subdirectories
    result = data_object.rf_write(arr_data);
    
# close
data_object.close();
print("done test");

